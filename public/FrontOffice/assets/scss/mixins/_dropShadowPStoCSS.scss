
@function pow($number, $exp) {
  $value: 1;
  @if $exp > 0 {
    @for $i from 1 through $exp {
      $value: $value * $number;
    }
  }
  @else if $exp < 0 {
    @for $i from 1 through -$exp {
      $value: $value / $number;
    }
  }
  @return $value;
}

@function fact($number) {
  $value: 1;
  @if $number > 0 {
    @for $i from 1 through $number {
      $value: $value * $i;
    }
  }
  @return $value;
}

@function pi() {
  @return 3.14159265359;
}

@function rad($angle) {
  $unit: unit($angle);
  $unitless: $angle / ($angle * 0 + 1);
  // If the angle has 'deg' as unit, convert to radians.
  @if $unit == deg {
    $unitless: $unitless / 180 * pi();
  }
  @return $unitless;
}

@function sin($angle) {
  $sin: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);
  }
  @return $sin;
}

@function cos($angle) {
  $cos: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / fact(2 * $i);
  }
  @return $cos;
}


@mixin dropShadowPStoCSS(
    $ps_red: 0,
    $ps_green: 0,
    $ps_blue: 0,
    $ps_opacity: 75,
    $ps_angle: 120,
    $ps_distance: 5,
    $ps_spread: 0,
    $ps_size: 5
) {
    $css_opacity: ($ps_opacity / 100);
    $css_angle: ((180 - $ps_angle) * pi() / 180 );
    $css_offset_y: (sin($css_angle)*$ps_distance);
    $css_offset_x: (cos($css_angle)*$ps_distance);
    $css_spread_radius: ($ps_size*$ps_spread / 100);
    $css_blur_radius: ($ps_size - $ps_spread);
    box-shadow: #{round($css_offset_x)}px #{round($css_offset_y)}px #{round($css_blur_radius)}px #{round($css_spread_radius)}px rgba( $ps_red, $ps_green, $ps_blue, $css_opacity );
}


